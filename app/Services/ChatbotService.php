<?php

namespace App\Services;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use Illuminate\Support\Facades\Log;
use Exception;

class ChatbotService
{
  protected $client;
  protected $apiKey;
  protected $baseUrl;
  protected $model;

  public function __construct()
  {
    $this->client = new Client();
    $this->apiKey = config('services.openai.api_key');
    $this->baseUrl = config('services.openai.base_url');
    $this->model = config('services.openai.model', 'gpt-4o-mini');
  }

  /**
   * X·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi t·ª´ AI
   *
   * @param string $message Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
   * @param string $userRole Vai tr√≤ ng∆∞·ªùi d√πng (student, teacher, admin, guest)
   * @return array
   */
  public function processMessage(string $message, string $userRole = 'guest'): array
  {
    if (!$this->apiKey) {
      return [
        'success' => false,
        'message' => 'Chatbot hi·ªán t·∫°i kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng li√™n h·ªá admin.'
      ];
    }

    try {
      $systemPrompt = $this->getSystemPrompt($userRole);
      $response = $this->sendToOpenAI($systemPrompt, $message);

      return [
        'success' => true,
        'message' => $response,
        'suggestions' => $this->getSuggestions($userRole)
      ];
    } catch (Exception $e) {
      Log::error('Chatbot error: ' . $e->getMessage());
      return [
        'success' => false,
        'message' => 'Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau.'
      ];
    }
  }

  /**
   * T·∫°o system prompt ph√π h·ª£p v·ªõi vai tr√≤ ng∆∞·ªùi d√πng
   */
  private function getSystemPrompt(string $userRole): string
  {
    $basePrompt = "B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh c·ªßa H·ªá th·ªëng Qu·∫£n l√Ω Trung t√¢m Gi√°o d·ª•c (Educational Center Management System). 
        B·∫°n c√≥ ki·∫øn th·ª©c chi ti·∫øt v·ªÅ h·ªá th·ªëng v√† lu√¥n h·ªó tr·ª£ ng∆∞·ªùi d√πng m·ªôt c√°ch chuy√™n nghi·ªáp, th√¢n thi·ªán.
        
        TH√îNG TIN CHI TI·∫æT V·ªÄ H·ªÜ TH·ªêNG:
        
        üè¢ T·ªîNG QUAN:
        - T√™n: Educational Center Management System (LMS)
        - M·ª•c ƒë√≠ch: Qu·∫£n l√Ω trung t√¢m gi√°o d·ª•c, bao g·ªìm trung t√¢m Quran, h·ªçc thu·∫≠t, ƒë√†o t·∫°o
        - C√¥ng ngh·ªá: Laravel + Livewire + Blade + MySQL + Tailwind CSS + Alpine.js
        - H·ªó tr·ª£: ƒêa ng√¥n ng·ªØ (English, Vietnamese), RTL cho ti·∫øng ·∫¢ R·∫°p
        
        üìä C·∫§U TR√öC CH√çNH:
        - Centers (Trung t√¢m): C√°c c∆° s·ªü gi√°o d·ª•c
        - Projects (Ch∆∞∆°ng tr√¨nh h·ªçc): C√°c kh√≥a h·ªçc/d·ª± √°n gi√°o d·ª•c  
        - Books (Gi√°o tr√¨nh): S√°ch v√† t√†i li·ªáu h·ªçc t·∫≠p
        - Sections (L·ªõp h·ªçc): C√°c l·ªõp/kh√≥a h·ªçc c·ª• th·ªÉ
        - Lectures (B√†i gi·∫£ng): N·ªôi dung gi·∫£ng d·∫°y
        - Exams (B√†i ki·ªÉm tra): ƒê√°nh gi√° h·ªçc t·∫≠p
        - Students/Teachers: Ng∆∞·ªùi d√πng trong h·ªá th·ªëng
        
        üéØ VAI TR√í & QUY·ªÄN H·∫†N:
        - Super Admin: To√†n quy·ªÅn qu·∫£n l√Ω h·ªá th·ªëng
        - Admin: Qu·∫£n l√Ω users, centers, projects, books
        - Teacher: T·∫°o lectures, exams, qu·∫£n l√Ω students, ƒëi·ªÉm danh
        - Student: Tham gia lectures, l√†m exams, xem progress  
        - Center Manager: Qu·∫£n l√Ω trung t√¢m c·ª• th·ªÉ
        - Examiner: Ch·∫•m b√†i ki·ªÉm tra v√† ƒë√°nh gi√°
        
        üöÄ T√çNH NƒÇNG CH√çNH:
        
        üìö Qu·∫£n l√Ω h·ªçc t·∫≠p:
        - ƒêƒÉng k√Ω students v√†o centers/sections/projects
        - T·∫°o v√† qu·∫£n l√Ω lectures v·ªõi attendance tracking
        - Theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p qua pages/student_lectures
        - Qu·∫£n l√Ω books v√† t√†i li·ªáu h·ªçc t·∫≠p
        
        üìù H·ªá th·ªëng b√†i ki·ªÉm tra AI:
        - T·∫°o questions t·ª± ƒë·ªông b·∫±ng OpenAI GPT-4o-mini
        - H·ªó tr·ª£ multiple choice v√† essay questions  
        - Preview v√† select questions tr∆∞·ªõc khi save
        - Qu·∫£n l√Ω student_exams v√† scoring
        - Ph√¢n c√¥ng examiners ƒë·ªÉ ch·∫•m b√†i
        
        üìä Tracking & Analytics:
        - Attendance status tracking (Attended/Absent/Excuse)
        - Student progress monitoring
        - Exam results v√† assessment
        - Dashboard ƒë·ªông cho m·ªói role
        
        üîß Workflow ch√≠nh:
        1. Enrollment: Student -> Center -> Section -> Project  
        2. Learning: Teacher t·∫°o Lectures -> Students tham gia
        3. Assessment: Teacher t·∫°o Exams (AI/manual) -> Students l√†m b√†i
        4. Grading: Examiner ch·∫•m ƒëi·ªÉm -> Results tracking
        
        ";

    switch ($userRole) {
      case 'student':
        return $basePrompt . "
                üéì H∆Ø·ªöNG D·∫™N CHO H·ªåC SINH:
                
                Dashboard & Navigation:
                - Truy c·∫≠p Dashboard ƒë·ªÉ xem overview
                - Tabs: Details (th√¥ng tin c√° nh√¢n), Logs (l·ªãch s·ª≠), Pages (ti·∫øn ƒë·ªô h·ªçc)
                
                Tham gia h·ªçc t·∫≠p:
                - Xem lectures ƒë∆∞·ª£c assign trong section
                - Check attendance status v√† notes t·ª´ teacher
                - Theo d√µi progress qua pages h·ªçc t·∫≠p
                - Truy c·∫≠p books v√† materials
                
                L√†m b√†i ki·ªÉm tra:
                - V√†o Student Exams ƒë·ªÉ xem b√†i ƒë∆∞·ª£c assign  
                - L√†m b√†i trong th·ªùi gian quy ƒë·ªãnh
                - Submit answers v√† ch·ªù examiner ch·∫•m ƒëi·ªÉm
                - Xem results v√† feedback
                
                Theo d√µi ti·∫øn ƒë·ªô:
                - Check attendance trong t·ª´ng lecture
                - Xem scores t·ª´ c√°c exams ƒë√£ l√†m  
                - Theo d√µi overall progress trong project
                - Li√™n h·ªá teacher n·∫øu c·∫ßn h·ªó tr·ª£
                
                H√£y tr·∫£ l·ªùi s√∫c t√≠ch, d·ªÖ hi·ªÉu v√† khuy·∫øn kh√≠ch h·ªçc t·∫≠p t√≠ch c·ª±c.";

      case 'teacher':
        return $basePrompt . "
                üë®‚Äçüè´ H∆Ø·ªöNG D·∫™N CHO GI√ÅO VI√äN:
                
                Qu·∫£n l√Ω Students:
                - Enroll students v√†o sections v√† projects
                - Assign students ƒë·∫øn lectures c·ª• th·ªÉ
                - Track attendance v√† ghi notes
                - Monitor student progress v√† performance
                
                T·∫°o n·ªôi dung gi·∫£ng d·∫°y:
                - T·∫°o lectures trong sections ƒë∆∞·ª£c assign
                - Upload materials v√† link v·ªõi books
                - Qu·∫£n l√Ω pages cho t·ª´ng student_lecture
                - Schedule v√† organize lessons
                
                T·∫°o b√†i ki·ªÉm tra th√¥ng minh:
                - S·ª≠ d·ª•ng AI ƒë·ªÉ generate questions t·ª± ƒë·ªông
                - Nh·∫≠p topic, ch·ªçn difficulty (easy/medium/hard)
                - Select question type (multiple_choice/essay/mixed)
                - Preview generated questions tr∆∞·ªõc khi save
                - Assign exams cho students
                
                ƒê√°nh gi√° v√† ch·∫•m ƒëi·ªÉm:
                - Review student_exam submissions
                - Grade multiple choice t·ª± ƒë·ªông
                - Ch·∫•m essay questions v·ªõi rubric
                - Provide feedback v√† assessment notes
                - Assign examiners cho peer review
                
                Analytics & Reports:
                - Theo d√µi attendance patterns
                - Monitor exam performance trends  
                - Generate progress reports
                - Identify students c·∫ßn support
                
                H√£y t·∫≠p trung v√†o hi·ªáu qu·∫£ gi·∫£ng d·∫°y v√† s·ª≠ d·ª•ng AI tools.";

      case 'admin':
        return $basePrompt . "
                üîß H∆Ø·ªöNG D·∫™N CHO QU·∫¢N TR·ªä VI√äN:
                
                Qu·∫£n l√Ω h·ªá th·ªëng:
                - Centers: Create/edit trung t√¢m, assign managers
                - Projects: Setup ch∆∞∆°ng tr√¨nh h·ªçc, link v·ªõi books
                - Sections: T·∫°o l·ªõp h·ªçc, assign teachers
                - Books: Qu·∫£n l√Ω gi√°o tr√¨nh v√† materials
                
                User Management:  
                - Students: Enrollment, section assignment
                - Teachers: Permissions, center assignment
                - Examiners: Exam grading permissions
                - Admins: Role v√† permission management
                
                C·∫•u h√¨nh AI:
                - OpenAI API settings trong .env
                - Question generation parameters
                - Model selection (GPT-4o-mini)
                - Max questions limit
                
                Monitoring & Analytics:
                - System usage statistics
                - User activity logs
                - Exam generation metrics
                - Performance monitoring
                
                Backup & Security:
                - Database backup procedures
                - User data protection
                - Role-based access control
                - Audit trails
                
                H√£y tr·∫£ l·ªùi chi ti·∫øt v·ªÅ technical setup v√† best practices.";

      default:
        return $basePrompt . "
                üåü H∆Ø·ªöNG D·∫™N T·ªîNG QUAN:
                
                Gi·ªõi thi·ªáu h·ªá th·ªëng:
                - Educational Center Management System hi·ªán ƒë·∫°i
                - H·ªó tr·ª£ qu·∫£n l√Ω trung t√¢m gi√°o d·ª•c to√†n di·ªán
                - T√≠ch h·ª£p AI ƒë·ªÉ t·∫°o b√†i ki·ªÉm tra t·ª± ƒë·ªông
                - Dashboard ri√™ng cho t·ª´ng vai tr√≤
                
                Ai c√≥ th·ªÉ s·ª≠ d·ª•ng:
                - Students: H·ªçc t·∫≠p v√† l√†m b√†i ki·ªÉm tra online
                - Teachers: Gi·∫£ng d·∫°y v√† qu·∫£n l√Ω l·ªõp h·ªçc hi·ªáu qu·∫£
                - Administrators: Qu·∫£n l√Ω to√†n b·ªô h·ªá th·ªëng
                - Center Managers: ƒêi·ªÅu h√†nh trung t√¢m
                
                L·ª£i √≠ch ch√≠nh:
                - Qu·∫£n l√Ω h·ªçc t·∫≠p s·ªë h√≥a ho√†n to√†n
                - AI h·ªó tr·ª£ t·∫°o c√¢u h·ªèi th√¥ng minh
                - Theo d√µi ti·∫øn ƒë·ªô real-time
                - ƒêa ng√¥n ng·ªØ v√† responsive design
                
                C√°ch b·∫Øt ƒë·∫ßu:
                - ƒêƒÉng k√Ω t√†i kho·∫£n theo vai tr√≤
                - ƒê∆∞·ª£c admin assign v√†o center/section ph√π h·ª£p
                - Tham gia orientation ƒë·ªÉ l√†m quen h·ªá th·ªëng
                - B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng theo workflow chu·∫©n
                
                                 H√£y tr·∫£ l·ªùi th√¢n thi·ªán ƒë·ªÉ thu h√∫t ng∆∞·ªùi d√πng m·ªõi tham gia.";
    }
  }

  /**
   * G·ª≠i tin nh·∫Øn ƒë·∫øn OpenAI API
   */
  private function sendToOpenAI(string $systemPrompt, string $userMessage): string
  {
    $response = $this->client->post($this->baseUrl . '/chat/completions', [
      'headers' => [
        'Authorization' => 'Bearer ' . $this->apiKey,
        'Content-Type' => 'application/json',
      ],
      'json' => [
        'model' => $this->model,
        'messages' => [
          [
            'role' => 'system',
            'content' => $systemPrompt
          ],
          [
            'role' => 'user',
            'content' => $userMessage
          ]
        ],
        'max_tokens' => 1000,
        'temperature' => 0.7,
      ],
      'timeout' => 30,
    ]);

    $data = json_decode($response->getBody()->getContents(), true);

    if (!isset($data['choices'][0]['message']['content'])) {
      throw new Exception('Invalid response from OpenAI API');
    }

    return $data['choices'][0]['message']['content'];
  }

  /**
   * L·∫•y c√¢u h·ªèi th∆∞·ªùng g·∫∑p
   */
  public function getFAQ(string $userRole = 'guest'): array
  {
    $generalFAQ = [
      [
        'question' => 'Educational Center Management System l√† g√¨?',
        'answer' => 'ƒê√¢y l√† h·ªá th·ªëng qu·∫£n l√Ω trung t√¢m gi√°o d·ª•c to√†n di·ªán, h·ªó tr·ª£ qu·∫£n l√Ω centers, projects, lectures, exams v·ªõi AI t√≠ch h·ª£p.'
      ],
      [
        'question' => 'H·ªá th·ªëng c√≥ nh·ªØng role n√†o?',
        'answer' => 'C√≥ 6 roles ch√≠nh: Super Admin, Admin, Teacher, Student, Center Manager, v√† Examiner, m·ªói role c√≥ permissions ri√™ng.'
      ],
      [
        'question' => 'C√≥ h·ªó tr·ª£ t·∫°o b√†i ki·ªÉm tra b·∫±ng AI kh√¥ng?',
        'answer' => 'C√≥! H·ªá th·ªëng t√≠ch h·ª£p OpenAI GPT-4o-mini ƒë·ªÉ t·∫°o questions t·ª± ƒë·ªông cho exams v·ªõi multiple choice v√† essay.'
      ]
    ];

    switch ($userRole) {
      case 'student':
        return array_merge($generalFAQ, [
          [
            'question' => 'L√†m sao ƒë·ªÉ xem lectures ƒë∆∞·ª£c assigned?',
            'answer' => 'V√†o Dashboard Student -> xem c√°c student_lectures trong section b·∫°n ƒë∆∞·ª£c enroll. Check attendance status v√† notes t·ª´ teacher.'
          ],
          [
            'question' => 'C√°ch l√†m b√†i ki·ªÉm tra (student_exam)?',
            'answer' => 'V√†o Student Exams -> ch·ªçn exam ƒë∆∞·ª£c assign -> l√†m b√†i trong th·ªùi gian quy ƒë·ªãnh -> submit ƒë·ªÉ examiner ch·∫•m ƒëi·ªÉm.'
          ],
          [
            'question' => 'L√†m sao theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p?',
            'answer' => 'Check tab Pages trong Dashboard ƒë·ªÉ xem progress qua c√°c student_lectures v√† exam results.'
          ],
          [
            'question' => 'Attendance tracking ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?',
            'answer' => 'Teacher s·∫Ω mark attendance cho t·ª´ng lecture: Attended/Absent/Excuse. B·∫°n c√≥ th·ªÉ xem status trong student_lectures.'
          ]
        ]);

      case 'teacher':
        return array_merge($generalFAQ, [
          [
            'question' => 'C√°ch t·∫°o exam v·ªõi AI questions?',
            'answer' => 'V√†o Exams -> Create with AI -> nh·∫≠p topic, difficulty (easy/medium/hard), type (multiple_choice/essay/mixed) -> preview -> select v√† save questions.'
          ],
          [
            'question' => 'L√†m sao qu·∫£n l√Ω student_lectures?',
            'answer' => 'T·∫°o lectures -> assign students -> track attendance -> ghi notes -> qu·∫£n l√Ω pages cho t·ª´ng student_lecture.'
          ],
          [
            'question' => 'C√°ch enroll students v√†o sections?',
            'answer' => 'V√†o Students management -> ch·ªçn student -> assign v√†o center/section/project ph√π h·ª£p.'
          ],
          [
            'question' => 'Student_exam grading process nh∆∞ th·∫ø n√†o?',
            'answer' => 'Multiple choice t·ª± ƒë·ªông grade. Essay questions c·∫ßn examiner review v√† provide assessment. C√≥ th·ªÉ assign peer examiners.'
          ]
        ]);

      case 'admin':
        return array_merge($generalFAQ, [
          [
            'question' => 'C√°ch setup centers v√† projects?',
            'answer' => 'Admin -> Centers -> create/edit centers -> assign managers. Projects -> setup ch∆∞∆°ng tr√¨nh h·ªçc -> link v·ªõi books.'
          ],
          [
            'question' => 'User management workflow?',
            'answer' => 'Manage users v·ªõi roles/permissions. Students enrollment v√†o sections. Teachers assignment to centers. Examiners grading permissions.'
          ],
          [
            'question' => 'C·∫•u h√¨nh OpenAI cho AI questions?',
            'answer' => 'Set trong .env: OPENAI_API_KEY, OPENAI_BASE_URL, OPENAI_MODEL=gpt-4o-mini, OPENAI_MAX_QUESTIONS=10'
          ]
        ]);

      default:
        return $generalFAQ;
    }
  }



  /**
   * L·∫•y g·ª£i √Ω c√¢u h·ªèi theo vai tr√≤
   */
  private function getSuggestions(string $userRole): array
  {
    switch ($userRole) {
      case 'student':
        return [
          'L√†m sao ƒë·ªÉ xem student_lectures ƒë∆∞·ª£c assigned?',
          'C√°ch l√†m b√†i student_exam tr·ª±c tuy·∫øn?',
          'Attendance tracking ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?',
          'L√†m sao check progress trong pages?',
          'C√°ch submit exam answers v√† xem results?'
        ];

      case 'teacher':
        return [
          'C√°ch t·∫°o exam v·ªõi AI questions?',
          'L√†m sao assign students v√†o sections?',
          'C√°ch track attendance trong lectures?',
          'Student_exam grading process nh∆∞ th·∫ø n√†o?',
          'L√†m sao qu·∫£n l√Ω student_lectures hi·ªáu qu·∫£?'
        ];

      case 'admin':
        return [
          'C√°ch setup centers v√† projects?',
          'User management workflow ra sao?',
          'C·∫•u h√¨nh OpenAI cho AI questions?',
          'L√†m sao assign teachers to centers?',
          'Role v√† permissions management?'
        ];

      default:
        return [
          'Educational Center Management System l√† g√¨?',
          'H·ªá th·ªëng c√≥ nh·ªØng roles n√†o?',
          'AI questions generation ho·∫°t ƒë·ªông ra sao?',
          'Workflow t·ª´ enrollment ƒë·∫øn grading?',
          'Centers, Projects, Sections kh√°c nhau th·∫ø n√†o?'
        ];
    }
  }
}
